//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using Bright.Serialization;
using System.Collections.Generic;
using SimpleJSON;



namespace cfg.skill
{ 

public sealed partial class Skill :  Bright.Config.BeanBase 
{
    public Skill(JSONNode _json) 
    {
        { if(!_json["id"].IsNumber) { throw new SerializationException(); }  Id = _json["id"]; }
        { if(!_json["name"].IsString) { throw new SerializationException(); }  Name = _json["name"]; }
        { if(!_json["desc"].IsString) { throw new SerializationException(); }  Desc = _json["desc"]; }
        { if(!_json["atk"].IsNumber) { throw new SerializationException(); }  Atk = _json["atk"]; }
        { if(!_json["atkRang"].IsNumber) { throw new SerializationException(); }  AtkRang = _json["atkRang"]; }
        { if(!_json["cd"].IsNumber) { throw new SerializationException(); }  Cd = _json["cd"]; }
        { if(!_json["timelineORbehavior"].IsNumber) { throw new SerializationException(); }  TimelineORbehavior = _json["timelineORbehavior"]; }
        { if(!_json["resName"].IsString) { throw new SerializationException(); }  ResName = _json["resName"]; }
        { var _j = _json["expire_time"]; if (_j.Tag != JSONNodeType.None && _j.Tag != JSONNodeType.NullValue) { { if(!_j.IsNumber) { throw new SerializationException(); }  ExpireTime = _j; } } else { ExpireTime = null; } }
        { if(!_json["batch_useable"].IsBoolean) { throw new SerializationException(); }  BatchUseable = _json["batch_useable"]; }
        { if(!_json["quality"].IsNumber) { throw new SerializationException(); }  Quality = (item.EQuality)_json["quality"].AsInt; }
        { if(!_json["exchange_stream"].IsObject) { throw new SerializationException(); }  ExchangeStream = item.ItemExchange.DeserializeItemExchange(_json["exchange_stream"]);  }
        { var __json0 = _json["exchange_list"]; if(!__json0.IsArray) { throw new SerializationException(); } ExchangeList = new System.Collections.Generic.List<item.ItemExchange>(__json0.Count); foreach(JSONNode __e0 in __json0.Children) { item.ItemExchange __v0;  { if(!__e0.IsObject) { throw new SerializationException(); }  __v0 = item.ItemExchange.DeserializeItemExchange(__e0);  }  ExchangeList.Add(__v0); }   }
        { if(!_json["exchange_column"].IsObject) { throw new SerializationException(); }  ExchangeColumn = item.ItemExchange.DeserializeItemExchange(_json["exchange_column"]);  }
        PostInit();
    }

    public Skill(int id, string name, string desc, int atk, int atkRang, int cd, int timelineORbehavior, string resName, long? expire_time, bool batch_useable, item.EQuality quality, item.ItemExchange exchange_stream, System.Collections.Generic.List<item.ItemExchange> exchange_list, item.ItemExchange exchange_column ) 
    {
        this.Id = id;
        this.Name = name;
        this.Desc = desc;
        this.Atk = atk;
        this.AtkRang = atkRang;
        this.Cd = cd;
        this.TimelineORbehavior = timelineORbehavior;
        this.ResName = resName;
        this.ExpireTime = expire_time;
        this.BatchUseable = batch_useable;
        this.Quality = quality;
        this.ExchangeStream = exchange_stream;
        this.ExchangeList = exchange_list;
        this.ExchangeColumn = exchange_column;
        PostInit();
    }

    public static Skill DeserializeSkill(JSONNode _json)
    {
        return new skill.Skill(_json);
    }

    /// <summary>
    /// 技能ID
    /// </summary>
    public int Id { get; private set; }
    /// <summary>
    /// 名字
    /// </summary>
    public string Name { get; private set; }
    /// <summary>
    /// 描述
    /// </summary>
    public string Desc { get; private set; }
    /// <summary>
    /// 攻击
    /// </summary>
    public int Atk { get; private set; }
    /// <summary>
    /// 攻击范围
    /// </summary>
    public int AtkRang { get; private set; }
    /// <summary>
    /// 冷却
    /// </summary>
    public int Cd { get; private set; }
    /// <summary>
    /// 时间线(0)/行为树(1)
    /// </summary>
    public int TimelineORbehavior { get; private set; }
    /// <summary>
    /// 资源名
    /// </summary>
    public string ResName { get; private set; }
    /// <summary>
    /// 过期时间
    /// </summary>
    public long? ExpireTime { get; private set; }
    /// <summary>
    /// 能否批量使用
    /// </summary>
    public bool BatchUseable { get; private set; }
    /// <summary>
    /// 品质
    /// </summary>
    public item.EQuality Quality { get; private set; }
    /// <summary>
    /// 道具兑换配置
    /// </summary>
    public item.ItemExchange ExchangeStream { get; private set; }
    public System.Collections.Generic.List<item.ItemExchange> ExchangeList { get; private set; }
    /// <summary>
    /// 道具兑换配置
    /// </summary>
    public item.ItemExchange ExchangeColumn { get; private set; }

    public const int __ID__ = 1155715156;
    public override int GetTypeId() => __ID__;

    public  void Resolve(Dictionary<string, object> _tables)
    {
        ExchangeStream?.Resolve(_tables);
        foreach(var _e in ExchangeList) { _e?.Resolve(_tables); }
        ExchangeColumn?.Resolve(_tables);
        PostResolve();
    }

    public  void TranslateText(System.Func<string, string, string> translator)
    {
        ExchangeStream?.TranslateText(translator);
        foreach(var _e in ExchangeList) { _e?.TranslateText(translator); }
        ExchangeColumn?.TranslateText(translator);
    }

    public override string ToString()
    {
        return "{ "
        + "Id:" + Id + ","
        + "Name:" + Name + ","
        + "Desc:" + Desc + ","
        + "Atk:" + Atk + ","
        + "AtkRang:" + AtkRang + ","
        + "Cd:" + Cd + ","
        + "TimelineORbehavior:" + TimelineORbehavior + ","
        + "ResName:" + ResName + ","
        + "ExpireTime:" + ExpireTime + ","
        + "BatchUseable:" + BatchUseable + ","
        + "Quality:" + Quality + ","
        + "ExchangeStream:" + ExchangeStream + ","
        + "ExchangeList:" + Bright.Common.StringUtil.CollectionToString(ExchangeList) + ","
        + "ExchangeColumn:" + ExchangeColumn + ","
        + "}";
    }
    
    partial void PostInit();
    partial void PostResolve();
}
}
