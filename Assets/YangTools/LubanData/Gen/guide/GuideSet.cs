//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using Bright.Serialization;
using System.Collections.Generic;
using SimpleJSON;



namespace cfg.guide
{ 

public sealed partial class GuideSet :  Bright.Config.BeanBase 
{
    public GuideSet(JSONNode _json) 
    {
        { if(!_json["id"].IsNumber) { throw new SerializationException(); }  Id = _json["id"]; }
        { if(!_json["guideText"].IsString) { throw new SerializationException(); }  GuideText = _json["guideText"]; }
        { if(!_json["isShowBg"].IsBoolean) { throw new SerializationException(); }  IsShowBg = _json["isShowBg"]; }
        { if(!_json["dialogDir"].IsString) { throw new SerializationException(); }  DialogDir = _json["dialogDir"]; }
        { if(!_json["haveFinger"].IsBoolean) { throw new SerializationException(); }  HaveFinger = _json["haveFinger"]; }
        { if(!_json["haveClickArea"].IsBoolean) { throw new SerializationException(); }  HaveClickArea = _json["haveClickArea"]; }
        { if(!_json["roleSprite"].IsString) { throw new SerializationException(); }  RoleSprite = _json["roleSprite"]; }
        { if(!_json["startEvent"].IsString) { throw new SerializationException(); }  StartEvent = _json["startEvent"]; }
        { if(!_json["clickEvent"].IsString) { throw new SerializationException(); }  ClickEvent = _json["clickEvent"]; }
        { if(!_json["showType"].IsString) { throw new SerializationException(); }  ShowType = _json["showType"]; }
        { if(!_json["maskType"].IsString) { throw new SerializationException(); }  MaskType = _json["maskType"]; }
        { if(!_json["nextID"].IsNumber) { throw new SerializationException(); }  NextID = _json["nextID"]; }
        PostInit();
    }

    public GuideSet(int id, string guideText, bool isShowBg, string dialogDir, bool haveFinger, bool haveClickArea, string roleSprite, string startEvent, string clickEvent, string showType, string maskType, int nextID ) 
    {
        this.Id = id;
        this.GuideText = guideText;
        this.IsShowBg = isShowBg;
        this.DialogDir = dialogDir;
        this.HaveFinger = haveFinger;
        this.HaveClickArea = haveClickArea;
        this.RoleSprite = roleSprite;
        this.StartEvent = startEvent;
        this.ClickEvent = clickEvent;
        this.ShowType = showType;
        this.MaskType = maskType;
        this.NextID = nextID;
        PostInit();
    }

    public static GuideSet DeserializeGuideSet(JSONNode _json)
    {
        return new guide.GuideSet(_json);
    }

    /// <summary>
    /// 这是id
    /// </summary>
    public int Id { get; private set; }
    /// <summary>
    /// 引导文字
    /// </summary>
    public string GuideText { get; private set; }
    /// <summary>
    /// 是否显示背景
    /// </summary>
    public bool IsShowBg { get; private set; }
    /// <summary>
    /// 文本框位置
    /// </summary>
    public string DialogDir { get; private set; }
    /// <summary>
    /// 是否显示手指
    /// </summary>
    public bool HaveFinger { get; private set; }
    /// <summary>
    /// 有无点击区域
    /// </summary>
    public bool HaveClickArea { get; private set; }
    /// <summary>
    /// 图片名称
    /// </summary>
    public string RoleSprite { get; private set; }
    /// <summary>
    /// 开始事件
    /// </summary>
    public string StartEvent { get; private set; }
    /// <summary>
    /// 点击事件
    /// </summary>
    public string ClickEvent { get; private set; }
    /// <summary>
    /// 显示类型
    /// </summary>
    public string ShowType { get; private set; }
    /// <summary>
    /// 遮罩类型
    /// </summary>
    public string MaskType { get; private set; }
    /// <summary>
    /// 下一个引导ID
    /// </summary>
    public int NextID { get; private set; }

    public const int __ID__ = -299889000;
    public override int GetTypeId() => __ID__;

    public  void Resolve(Dictionary<string, object> _tables)
    {
        PostResolve();
    }

    public  void TranslateText(System.Func<string, string, string> translator)
    {
    }

    public override string ToString()
    {
        return "{ "
        + "Id:" + Id + ","
        + "GuideText:" + GuideText + ","
        + "IsShowBg:" + IsShowBg + ","
        + "DialogDir:" + DialogDir + ","
        + "HaveFinger:" + HaveFinger + ","
        + "HaveClickArea:" + HaveClickArea + ","
        + "RoleSprite:" + RoleSprite + ","
        + "StartEvent:" + StartEvent + ","
        + "ClickEvent:" + ClickEvent + ","
        + "ShowType:" + ShowType + ","
        + "MaskType:" + MaskType + ","
        + "NextID:" + NextID + ","
        + "}";
    }
    
    partial void PostInit();
    partial void PostResolve();
}
}
